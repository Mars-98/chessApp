@@ -0,0 +1,126 @@

Pieces (folder): Talk to API about whether we should calculate the positions on placement of piece or not.
Piece.py
    __init__():
        - points: int
        - color: string
        - current location: depends on how we determine grid
        - in_play (In play or not):
        - move_count(specifically for pawns on their first move, and castling the rook and king)

    move(): abstract method
    //comments
        player can only move when it his/her turn
        first checks if king is in check:
        each piece has its own movement rules
        cannot move through its own piece(except for the knight)

    capture(piece_old, piece_new): void
        cannot kill own color
        piece can take the place of the current enemy piece
            - sets location of current piece to piece that is capture
            - set capture piece location to Null
            - changes in_play of capture piece to false
pawn.py
    __init__():
        - points: int
        - color: string
        - current location: depends on how we determine grid
        - in_play (In play or not):
        - move_count(specifically for pawns on their first move, and castling the rook and king)

    move(): void - override
        check pawns move_count
            pawns can move 1 or 2 spaces forward on first move
            otherwise pawns can only move 1 space forward except on kill

    capture(piece_old, piece_new): void
        - can only capture forward diagonally 1 space

    promotion()void
        if pawn reaches the other side of the board
        pawn can be replaced with the following pieces: bishop, knight, rook, and queen
        current location stays the same
        remove current pawn from play

    en_passant()void
        special move to be defined later

bishop.py
    __init__():
        - points: int
        - color: string
        - current location: depends on how we determine grid
        - in_play (In play or not):
        - move_count(specifically for pawns on their first move, and castling the rook and king)

    move(): void - override
        bishop can move diagonally in all directions


knight.py
    __init__():
        - points: int
        - color: string
        - current location: depends on how we determine grid
        - in_play (In play or not):
        - move_count(specifically for pawns on their first move, and castling the rook and king)

    move(): void - override
       moves in L: 3 horizonal & 1 vertical spaces or 3 vertical & 1 horizonal spaces
            - can move through pieces

rook.py
    __init__():
        - points: int
        - color: string
        - current location: depends on how we determine grid
        - in_play (In play or not):
        - move_count(specifically for rook on their first move, and castling the rook and king)

    move(): void - override
        check rook move_count
            castling
                if rook and king both have move count == 0
                cannot have pieces in between the two pieces
                king cannot be in check
                king can castle on both sides

queen.py
    __init__():
        - points: int
        - color: string
        - current location: depends on how we determine grid
        - in_play (In play or not):
        - move_count(specifically for pawns on their first move, and castling the rook and king)

    move(): void - override
        queen can move as many vacant spaces vertically and diagonally

king.py
    __init__():
        - points: int
        - color: string
        - current location: depends on how we determine grid
        - in_play (In play or not):
        - move_count(specifically for pawns on their first move, and castling the rook and king)

    move(): void - override
       castling
                kings movement is what triggers the castle
                if rook and king both have move count == 0
                cannot have pieces in between the two pieces
                king cannot be in check
                king can castle on both sides
     king can move one vacant space in all directions